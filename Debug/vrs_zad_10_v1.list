
vrs_zad_10_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08002820  08002820  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002820  08002820  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000008  08002830  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002830  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ed4  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fb9  00000000  00000000  00024f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006f8  00000000  00000000  00025ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  000265c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f27  00000000  00000000  00026c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003c79  00000000  00000000  0003cb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075491  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5c61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ccc  00000000  00000000  000b5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002778 	.word	0x08002778

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08002778 	.word	0x08002778

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	; (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3b01      	subs	r3, #1
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <LL_DMA_SetDataTransferDirection+0x48>)
 8000336:	5cd3      	ldrb	r3, [r2, r3]
 8000338:	461a      	mov	r2, r3
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	4413      	add	r3, r2
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000344:	f023 0310 	bic.w	r3, r3, #16
 8000348:	68ba      	ldr	r2, [r7, #8]
 800034a:	3a01      	subs	r2, #1
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <LL_DMA_SetDataTransferDirection+0x48>)
 800034e:	5c8a      	ldrb	r2, [r1, r2]
 8000350:	4611      	mov	r1, r2
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	440a      	add	r2, r1
 8000356:	4611      	mov	r1, r2
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4313      	orrs	r3, r2
 800035c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	080027e8 	.word	0x080027e8

08000370 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3b01      	subs	r3, #1
 8000380:	4a0c      	ldr	r2, [pc, #48]	; (80003b4 <LL_DMA_SetMode+0x44>)
 8000382:	5cd3      	ldrb	r3, [r2, r3]
 8000384:	461a      	mov	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	4413      	add	r3, r2
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f023 0220 	bic.w	r2, r3, #32
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	3b01      	subs	r3, #1
 8000394:	4907      	ldr	r1, [pc, #28]	; (80003b4 <LL_DMA_SetMode+0x44>)
 8000396:	5ccb      	ldrb	r3, [r1, r3]
 8000398:	4619      	mov	r1, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	440b      	add	r3, r1
 800039e:	4619      	mov	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	600b      	str	r3, [r1, #0]
             Mode);
}
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	080027e8 	.word	0x080027e8

080003b8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <LL_DMA_SetPeriphIncMode+0x44>)
 80003ca:	5cd3      	ldrb	r3, [r2, r3]
 80003cc:	461a      	mov	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	3b01      	subs	r3, #1
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <LL_DMA_SetPeriphIncMode+0x44>)
 80003de:	5ccb      	ldrb	r3, [r1, r3]
 80003e0:	4619      	mov	r1, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	440b      	add	r3, r1
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	080027e8 	.word	0x080027e8

08000400 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	3b01      	subs	r3, #1
 8000410:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <LL_DMA_SetMemoryIncMode+0x44>)
 8000412:	5cd3      	ldrb	r3, [r2, r3]
 8000414:	461a      	mov	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	4413      	add	r3, r2
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	3b01      	subs	r3, #1
 8000424:	4907      	ldr	r1, [pc, #28]	; (8000444 <LL_DMA_SetMemoryIncMode+0x44>)
 8000426:	5ccb      	ldrb	r3, [r1, r3]
 8000428:	4619      	mov	r1, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	440b      	add	r3, r1
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	080027e8 	.word	0x080027e8

08000448 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	3b01      	subs	r3, #1
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <LL_DMA_SetPeriphSize+0x44>)
 800045a:	5cd3      	ldrb	r3, [r2, r3]
 800045c:	461a      	mov	r2, r3
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	4413      	add	r3, r2
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	3b01      	subs	r3, #1
 800046c:	4907      	ldr	r1, [pc, #28]	; (800048c <LL_DMA_SetPeriphSize+0x44>)
 800046e:	5ccb      	ldrb	r3, [r1, r3]
 8000470:	4619      	mov	r1, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	440b      	add	r3, r1
 8000476:	4619      	mov	r1, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	080027e8 	.word	0x080027e8

08000490 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <LL_DMA_SetMemorySize+0x44>)
 80004a2:	5cd3      	ldrb	r3, [r2, r3]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	4413      	add	r3, r2
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <LL_DMA_SetMemorySize+0x44>)
 80004b6:	5ccb      	ldrb	r3, [r1, r3]
 80004b8:	4619      	mov	r1, r3
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	440b      	add	r3, r1
 80004be:	4619      	mov	r1, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80004c6:	bf00      	nop
 80004c8:	3714      	adds	r7, #20
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	080027e8 	.word	0x080027e8

080004d8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a0c      	ldr	r2, [pc, #48]	; (800051c <LL_DMA_SetChannelPriorityLevel+0x44>)
 80004ea:	5cd3      	ldrb	r3, [r2, r3]
 80004ec:	461a      	mov	r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	4413      	add	r3, r2
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	4907      	ldr	r1, [pc, #28]	; (800051c <LL_DMA_SetChannelPriorityLevel+0x44>)
 80004fe:	5ccb      	ldrb	r3, [r1, r3]
 8000500:	4619      	mov	r1, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	440b      	add	r3, r1
 8000506:	4619      	mov	r1, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4313      	orrs	r3, r2
 800050c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	080027e8 	.word	0x080027e8

08000520 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <LL_RCC_HSI_Enable+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <LL_RCC_HSI_Enable+0x1c>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_RCC_HSI_IsReady+0x20>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f003 0302 	and.w	r3, r3, #2
 800054c:	2b02      	cmp	r3, #2
 800054e:	bf0c      	ite	eq
 8000550:	2301      	moveq	r3, #1
 8000552:	2300      	movne	r3, #0
 8000554:	b2db      	uxtb	r3, r3
}
 8000556:	4618      	mov	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	00db      	lsls	r3, r3, #3
 8000578:	4904      	ldr	r1, [pc, #16]	; (800058c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800057a:	4313      	orrs	r3, r2
 800057c:	600b      	str	r3, [r1, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <LL_RCC_SetSysClkSource+0x24>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f023 0203 	bic.w	r2, r3, #3
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <LL_RCC_SetSysClkSource+0x24>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	604b      	str	r3, [r1, #4]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000

080005b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <LL_RCC_GetSysClkSource+0x18>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	f003 030c 	and.w	r3, r3, #12
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005e4:	4904      	ldr	r1, [pc, #16]	; (80005f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800060c:	4904      	ldr	r1, [pc, #16]	; (8000620 <LL_RCC_SetAPB1Prescaler+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	604b      	str	r3, [r1, #4]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <LL_RCC_SetAPB2Prescaler+0x24>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000634:	4904      	ldr	r1, [pc, #16]	; (8000648 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000656:	695a      	ldr	r2, [r3, #20]
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4313      	orrs	r3, r2
 800065e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4013      	ands	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800066a:	68fb      	ldr	r3, [r7, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000

0800067c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000692:	69da      	ldr	r2, [r3, #28]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40021000 	.word	0x40021000

080006ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006b6:	699a      	ldr	r2, [r3, #24]
 80006b8:	4907      	ldr	r1, [pc, #28]	; (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c2:	699a      	ldr	r2, [r3, #24]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000

080006dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_FLASH_SetLatency+0x24>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 0207 	bic.w	r2, r3, #7
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <LL_FLASH_SetLatency+0x24>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	600b      	str	r3, [r1, #0]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40022000 	.word	0x40022000

08000704 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_FLASH_GetLatency+0x18>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 0307 	and.w	r3, r3, #7
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f043 0201 	orr.w	r2, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	601a      	str	r2, [r3, #0]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6a1a      	ldr	r2, [r3, #32]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	621a      	str	r2, [r3, #32]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80007a4:	b4b0      	push	{r4, r5, r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d028      	beq.n	8000806 <LL_TIM_OC_DisableFast+0x62>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d023      	beq.n	8000802 <LL_TIM_OC_DisableFast+0x5e>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b10      	cmp	r3, #16
 80007be:	d01e      	beq.n	80007fe <LL_TIM_OC_DisableFast+0x5a>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b40      	cmp	r3, #64	; 0x40
 80007c4:	d019      	beq.n	80007fa <LL_TIM_OC_DisableFast+0x56>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007cc:	d013      	beq.n	80007f6 <LL_TIM_OC_DisableFast+0x52>
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007d4:	d00d      	beq.n	80007f2 <LL_TIM_OC_DisableFast+0x4e>
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007dc:	d007      	beq.n	80007ee <LL_TIM_OC_DisableFast+0x4a>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e4:	d101      	bne.n	80007ea <LL_TIM_OC_DisableFast+0x46>
 80007e6:	2307      	movs	r3, #7
 80007e8:	e00e      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007ea:	2308      	movs	r3, #8
 80007ec:	e00c      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007ee:	2306      	movs	r3, #6
 80007f0:	e00a      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007f2:	2305      	movs	r3, #5
 80007f4:	e008      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007f6:	2304      	movs	r3, #4
 80007f8:	e006      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007fa:	2303      	movs	r3, #3
 80007fc:	e004      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 80007fe:	2302      	movs	r3, #2
 8000800:	e002      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 8000802:	2301      	movs	r3, #1
 8000804:	e000      	b.n	8000808 <LL_TIM_OC_DisableFast+0x64>
 8000806:	2300      	movs	r3, #0
 8000808:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3318      	adds	r3, #24
 800080e:	461a      	mov	r2, r3
 8000810:	4629      	mov	r1, r5
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <LL_TIM_OC_DisableFast+0x94>)
 8000814:	5c5b      	ldrb	r3, [r3, r1]
 8000816:	4413      	add	r3, r2
 8000818:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800081a:	6822      	ldr	r2, [r4, #0]
 800081c:	4629      	mov	r1, r5
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <LL_TIM_OC_DisableFast+0x98>)
 8000820:	5c5b      	ldrb	r3, [r3, r1]
 8000822:	4619      	mov	r1, r3
 8000824:	2304      	movs	r3, #4
 8000826:	408b      	lsls	r3, r1
 8000828:	43db      	mvns	r3, r3
 800082a:	4013      	ands	r3, r2
 800082c:	6023      	str	r3, [r4, #0]

}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bcb0      	pop	{r4, r5, r7}
 8000836:	4770      	bx	lr
 8000838:	080027f0 	.word	0x080027f0
 800083c:	080027fc 	.word	0x080027fc

08000840 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000840:	b4b0      	push	{r4, r5, r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d028      	beq.n	80008a2 <LL_TIM_OC_EnablePreload+0x62>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d023      	beq.n	800089e <LL_TIM_OC_EnablePreload+0x5e>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	2b10      	cmp	r3, #16
 800085a:	d01e      	beq.n	800089a <LL_TIM_OC_EnablePreload+0x5a>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2b40      	cmp	r3, #64	; 0x40
 8000860:	d019      	beq.n	8000896 <LL_TIM_OC_EnablePreload+0x56>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000868:	d013      	beq.n	8000892 <LL_TIM_OC_EnablePreload+0x52>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000870:	d00d      	beq.n	800088e <LL_TIM_OC_EnablePreload+0x4e>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000878:	d007      	beq.n	800088a <LL_TIM_OC_EnablePreload+0x4a>
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000880:	d101      	bne.n	8000886 <LL_TIM_OC_EnablePreload+0x46>
 8000882:	2307      	movs	r3, #7
 8000884:	e00e      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 8000886:	2308      	movs	r3, #8
 8000888:	e00c      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 800088a:	2306      	movs	r3, #6
 800088c:	e00a      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 800088e:	2305      	movs	r3, #5
 8000890:	e008      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 8000892:	2304      	movs	r3, #4
 8000894:	e006      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 8000896:	2303      	movs	r3, #3
 8000898:	e004      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 800089a:	2302      	movs	r3, #2
 800089c:	e002      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 800089e:	2301      	movs	r3, #1
 80008a0:	e000      	b.n	80008a4 <LL_TIM_OC_EnablePreload+0x64>
 80008a2:	2300      	movs	r3, #0
 80008a4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3318      	adds	r3, #24
 80008aa:	461a      	mov	r2, r3
 80008ac:	4629      	mov	r1, r5
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <LL_TIM_OC_EnablePreload+0x94>)
 80008b0:	5c5b      	ldrb	r3, [r3, r1]
 80008b2:	4413      	add	r3, r2
 80008b4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	4629      	mov	r1, r5
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <LL_TIM_OC_EnablePreload+0x98>)
 80008bc:	5c5b      	ldrb	r3, [r3, r1]
 80008be:	4619      	mov	r1, r3
 80008c0:	2308      	movs	r3, #8
 80008c2:	408b      	lsls	r3, r1
 80008c4:	4313      	orrs	r3, r2
 80008c6:	6023      	str	r3, [r4, #0]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bcb0      	pop	{r4, r5, r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	080027f0 	.word	0x080027f0
 80008d8:	080027fc 	.word	0x080027fc

080008dc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80008ee:	f023 0307 	bic.w	r3, r3, #7
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	609a      	str	r2, [r3, #8]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	431a      	orrs	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	605a      	str	r2, [r3, #4]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	60da      	str	r2, [r3, #12]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	601a      	str	r2, [r3, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	609a      	str	r2, [r3, #8]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	609a      	str	r2, [r3, #8]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <my_str_cpy>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void my_str_cpy(uint8_t *to,uint8_t *from, uint16_t *copied, uint16_t max_copied){
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	807b      	strh	r3, [r7, #2]
	uint16_t cnt;
	if (max_copied >=1)
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <my_str_cpy+0x1a>
		max_copied--;
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	807b      	strh	r3, [r7, #2]
	for (cnt=0;cnt<=255;cnt++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	82fb      	strh	r3, [r7, #22]
 8000a12:	e014      	b.n	8000a3e <my_str_cpy+0x4a>
	{
		*to=*from;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	701a      	strb	r2, [r3, #0]
		if ((*from == '\0')||(cnt>=max_copied)){
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00f      	beq.n	8000a44 <my_str_cpy+0x50>
 8000a24:	8afa      	ldrh	r2, [r7, #22]
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d20b      	bcs.n	8000a44 <my_str_cpy+0x50>
			break;
		}
		else{
			to+=1;from+=1;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
	for (cnt=0;cnt<=255;cnt++)
 8000a38:	8afb      	ldrh	r3, [r7, #22]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	82fb      	strh	r3, [r7, #22]
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	2bff      	cmp	r3, #255	; 0xff
 8000a42:	d9e7      	bls.n	8000a14 <my_str_cpy+0x20>
		}
	}
	*copied=cnt;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	8afa      	ldrh	r2, [r7, #22]
 8000a48:	801a      	strh	r2, [r3, #0]
}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <inic_dma_tx>:

void inic_dma_tx(uint16_t length){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	80fb      	strh	r3, [r7, #6]
	  USART2->CR3 |= USART_CR3_DMAT; // set usart  TX with dma
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <inic_dma_tx+0x40>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <inic_dma_tx+0x40>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6093      	str	r3, [r2, #8]

	  DMA1_Channel7->CNDTR=length;// dma inic
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <inic_dma_tx+0x44>)
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	6053      	str	r3, [r2, #4]
	  DMA1_Channel7->CCR |= DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_CIRC;
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <inic_dma_tx+0x44>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <inic_dma_tx+0x44>)
 8000a7a:	f043 03b2 	orr.w	r3, r3, #178	; 0xb2
 8000a7e:	6013      	str	r3, [r2, #0]
	  DMA1_Channel7->CPAR=(uint32_t)&(USART2->TDR);
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <inic_dma_tx+0x44>)
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <inic_dma_tx+0x48>)
 8000a84:	609a      	str	r2, [r3, #8]
	  DMA1_Channel7->CMAR=(uint32_t)tx_buff;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <inic_dma_tx+0x44>)
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <inic_dma_tx+0x4c>)
 8000a8a:	60da      	str	r2, [r3, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40020080 	.word	0x40020080
 8000aa0:	40004428 	.word	0x40004428
 8000aa4:	20000140 	.word	0x20000140

08000aa8 <set_rx_dma_starting_point>:

void set_rx_dma_starting_point(uint16_t length){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
	DMA1_Channel6->CCR &= ~DMA_CCR_EN;//stop listening
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <set_rx_dma_starting_point+0x34>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a09      	ldr	r2, [pc, #36]	; (8000adc <set_rx_dma_starting_point+0x34>)
 8000ab8:	f023 0301 	bic.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]
	DMA1_Channel6->CNDTR = length;
 8000abe:	4a07      	ldr	r2, [pc, #28]	; (8000adc <set_rx_dma_starting_point+0x34>)
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	6053      	str	r3, [r2, #4]
	DMA1_Channel6->CCR |= DMA_CCR_EN;//start listening
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <set_rx_dma_starting_point+0x34>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <set_rx_dma_starting_point+0x34>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	4002006c 	.word	0x4002006c

08000ae0 <inic_dma_rx_and_it_ilde>:

void inic_dma_rx_and_it_ilde(uint16_t length){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
	  USART2->CR1 |=USART_CR1_IDLEIE;
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <inic_dma_rx_and_it_ilde+0x54>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <inic_dma_rx_and_it_ilde+0x54>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	6013      	str	r3, [r2, #0]
	  NVIC_EnableIRQ(USART2_IRQn);
 8000af6:	2026      	movs	r0, #38	; 0x26
 8000af8:	f7ff fb98 	bl	800022c <__NVIC_EnableIRQ>

	  USART2->CR3 |= USART_CR3_DMAR; // set usart RX with dma
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <inic_dma_rx_and_it_ilde+0x54>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <inic_dma_rx_and_it_ilde+0x54>)
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	6093      	str	r3, [r2, #8]
	  //DMA1_Channel6->CNDTR = length;
	  DMA1_Channel6->CCR |= DMA_CCR_PL_0 | DMA_CCR_MINC | DMA_CCR_HTIE | DMA_CCR_TCIE ;//| DMA_CCR_CIRC; //DMA_CCR_CIRC
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <inic_dma_rx_and_it_ilde+0x58>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <inic_dma_rx_and_it_ilde+0x58>)
 8000b0e:	f443 5384 	orr.w	r3, r3, #4224	; 0x1080
 8000b12:	f043 0306 	orr.w	r3, r3, #6
 8000b16:	6013      	str	r3, [r2, #0]

	  DMA1_Channel6->CPAR=(uint32_t)&(USART2->RDR);
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <inic_dma_rx_and_it_ilde+0x58>)
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <inic_dma_rx_and_it_ilde+0x5c>)
 8000b1c:	609a      	str	r2, [r3, #8]
	  DMA1_Channel6->CMAR=(uint32_t)rx_buff;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <inic_dma_rx_and_it_ilde+0x58>)
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <inic_dma_rx_and_it_ilde+0x60>)
 8000b22:	60da      	str	r2, [r3, #12]

	  set_rx_dma_starting_point(length);
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ffbe 	bl	8000aa8 <set_rx_dma_starting_point>
	  //DMA1_Channel6->CCR |= DMA_CCR_EN;//start listening
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004400 	.word	0x40004400
 8000b38:	4002006c 	.word	0x4002006c
 8000b3c:	40004424 	.word	0x40004424
 8000b40:	20000028 	.word	0x20000028

08000b44 <enable_dma_and_transmitt>:

void enable_dma_and_transmitt(uint16_t length){
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	DMA1_Channel7->CCR &= ~DMA_CCR_EN;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <enable_dma_and_transmitt+0x34>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <enable_dma_and_transmitt+0x34>)
 8000b54:	f023 0301 	bic.w	r3, r3, #1
 8000b58:	6013      	str	r3, [r2, #0]
	DMA1_Channel7->CNDTR=length;// dma inic
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <enable_dma_and_transmitt+0x34>)
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	6053      	str	r3, [r2, #4]
	DMA1_Channel7->CCR |= DMA_CCR_EN;	//start transmission
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <enable_dma_and_transmitt+0x34>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <enable_dma_and_transmitt+0x34>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]

}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	40020080 	.word	0x40020080

08000b7c <start_tim17_with_IT>:

void start_tim17_with_IT(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	  LL_TIM_EnableIT_UPDATE(TIM17);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <start_tim17_with_IT+0x1c>)
 8000b82:	f7ff fee3 	bl	800094c <LL_TIM_EnableIT_UPDATE>
	  TIM17->CR1 |= TIM_CR1_CEN; // start timer
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <start_tim17_with_IT+0x1c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <start_tim17_with_IT+0x1c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6013      	str	r3, [r2, #0]
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40014800 	.word	0x40014800

08000b9c <write_to_tx_buf_number>:

void write_to_tx_buf_number(uint8_t *str,uint8_t num){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
	uint8_t cnt=0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]
	while(num>=10){
 8000bac:	e005      	b.n	8000bba <write_to_tx_buf_number+0x1e>
		cnt++;num-=10;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	3b0a      	subs	r3, #10
 8000bb8:	70fb      	strb	r3, [r7, #3]
	while(num>=10){
 8000bba:	78fb      	ldrb	r3, [r7, #3]
 8000bbc:	2b09      	cmp	r3, #9
 8000bbe:	d8f6      	bhi.n	8000bae <write_to_tx_buf_number+0x12>
	}
	*str='0'+cnt;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3330      	adds	r3, #48	; 0x30
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	701a      	strb	r2, [r3, #0]
	str+=1;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
	*str='0'+num;
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	3330      	adds	r3, #48	; 0x30
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	701a      	strb	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <tim_17_1_sec_delay>:

void tim_17_1_sec_delay(void){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	uint16_t temp;
	if (mode_2 & mode_2_manual){
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <tim_17_1_sec_delay+0x54>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d005      	beq.n	8000c06 <tim_17_1_sec_delay+0x1e>
		my_str_cpy(tx_buff,(uint8_t *)"1 sec delay: PWM: xx MAN\r",&temp,max_tx_buff_size);
 8000bfa:	1dba      	adds	r2, r7, #6
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	4910      	ldr	r1, [pc, #64]	; (8000c40 <tim_17_1_sec_delay+0x58>)
 8000c00:	4810      	ldr	r0, [pc, #64]	; (8000c44 <tim_17_1_sec_delay+0x5c>)
 8000c02:	f7ff fef7 	bl	80009f4 <my_str_cpy>
	}
	if (mode_2 & mode_2_auto){
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <tim_17_1_sec_delay+0x54>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <tim_17_1_sec_delay+0x36>
		my_str_cpy(tx_buff,(uint8_t *)"1 sec delay: PWM: xx AUTO\r",&temp,max_tx_buff_size);
 8000c12:	1dba      	adds	r2, r7, #6
 8000c14:	2320      	movs	r3, #32
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <tim_17_1_sec_delay+0x60>)
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <tim_17_1_sec_delay+0x5c>)
 8000c1a:	f7ff feeb 	bl	80009f4 <my_str_cpy>
	}
	write_to_tx_buf_number(&tx_buff[18],PWM_duty_cycle);
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <tim_17_1_sec_delay+0x64>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4619      	mov	r1, r3
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <tim_17_1_sec_delay+0x68>)
 8000c26:	f7ff ffb9 	bl	8000b9c <write_to_tx_buf_number>

	enable_dma_and_transmitt(temp);
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff89 	bl	8000b44 <enable_dma_and_transmitt>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000027 	.word	0x20000027
 8000c40:	08002790 	.word	0x08002790
 8000c44:	20000140 	.word	0x20000140
 8000c48:	080027ac 	.word	0x080027ac
 8000c4c:	20000024 	.word	0x20000024
 8000c50:	20000152 	.word	0x20000152

08000c54 <my_str_cmp>:

uint8_t my_str_cmp(uint8_t *str1, uint8_t *str2, uint8_t max){
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t cnt;
	for(cnt=0;cnt<=max;cnt++){
 8000c62:	2300      	movs	r3, #0
 8000c64:	75fb      	strb	r3, [r7, #23]
 8000c66:	e010      	b.n	8000c8a <my_str_cmp+0x36>
		if (*str1 != *str2)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d001      	beq.n	8000c78 <my_str_cmp+0x24>
			{return(0);}
 8000c74:	2300      	movs	r3, #0
 8000c76:	e00d      	b.n	8000c94 <my_str_cmp+0x40>
		str1+=1;str2+=1;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
	for(cnt=0;cnt<=max;cnt++){
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	3301      	adds	r3, #1
 8000c88:	75fb      	strb	r3, [r7, #23]
 8000c8a:	7dfa      	ldrb	r2, [r7, #23]
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d9ea      	bls.n	8000c68 <my_str_cmp+0x14>
	}
	return(255);
 8000c92:	23ff      	movs	r3, #255	; 0xff
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	371c      	adds	r7, #28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <setDutyCycle>:


void setDutyCycle(uint8_t D){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	if ((D>=0) &&(D<=99)){
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	2b63      	cmp	r3, #99	; 0x63
 8000cae:	d806      	bhi.n	8000cbe <setDutyCycle+0x1e>
		PWM_duty_cycle=D;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <setDutyCycle+0x2c>)
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	7013      	strb	r3, [r2, #0]
		// to do: add to tim2->crr1
		TIM2->CCR1 = D;
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	6353      	str	r3, [r2, #52]	; 0x34
	}

}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000024 	.word	0x20000024

08000cd0 <test_input_data>:

void test_input_data(uint16_t from, uint16_t to,uint8_t reset_dma){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	80bb      	strh	r3, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	70fb      	strb	r3, [r7, #3]
	uint16_t cnt;
	uint8_t temp,temp_2;
	for(cnt=from;cnt<=to;cnt++){
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	81fb      	strh	r3, [r7, #14]
 8000ce6:	e090      	b.n	8000e0a <test_input_data+0x13a>
		if (rx_buff[cnt] == '$'){
 8000ce8:	89fb      	ldrh	r3, [r7, #14]
 8000cea:	4a50      	ldr	r2, [pc, #320]	; (8000e2c <test_input_data+0x15c>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	2b24      	cmp	r3, #36	; 0x24
 8000cf0:	f040 8088 	bne.w	8000e04 <test_input_data+0x134>
					temp=rx_buff[cnt+1];
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a4c      	ldr	r2, [pc, #304]	; (8000e2c <test_input_data+0x15c>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	737b      	strb	r3, [r7, #13]
					switch (temp){
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	2b61      	cmp	r3, #97	; 0x61
 8000d02:	d01f      	beq.n	8000d44 <test_input_data+0x74>
 8000d04:	2b6d      	cmp	r3, #109	; 0x6d
 8000d06:	d002      	beq.n	8000d0e <test_input_data+0x3e>
 8000d08:	2b50      	cmp	r3, #80	; 0x50
 8000d0a:	d036      	beq.n	8000d7a <test_input_data+0xaa>
 8000d0c:	e07a      	b.n	8000e04 <test_input_data+0x134>
						case 'm': {
							if (my_str_cmp(&rx_buff[cnt+2] , (uint8_t *)"anual$", 5)){
 8000d0e:	89fb      	ldrh	r3, [r7, #14]
 8000d10:	3302      	adds	r3, #2
 8000d12:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <test_input_data+0x15c>)
 8000d14:	4413      	add	r3, r2
 8000d16:	2205      	movs	r2, #5
 8000d18:	4945      	ldr	r1, [pc, #276]	; (8000e30 <test_input_data+0x160>)
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff9a 	bl	8000c54 <my_str_cmp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d069      	beq.n	8000dfa <test_input_data+0x12a>
								mode_2 |= mode_2_manual;
 8000d26:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <test_input_data+0x164>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <test_input_data+0x164>)
 8000d32:	701a      	strb	r2, [r3, #0]
								mode_2 &= ~mode_2_auto;
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <test_input_data+0x164>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	f023 0302 	bic.w	r3, r3, #2
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4b3d      	ldr	r3, [pc, #244]	; (8000e34 <test_input_data+0x164>)
 8000d40:	701a      	strb	r2, [r3, #0]
							}
							break;}
 8000d42:	e05a      	b.n	8000dfa <test_input_data+0x12a>
						case 'a': {
							if (my_str_cmp(&rx_buff[cnt+2] , (uint8_t *)"uto$", 3)){
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	3302      	adds	r3, #2
 8000d48:	4a38      	ldr	r2, [pc, #224]	; (8000e2c <test_input_data+0x15c>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	493a      	ldr	r1, [pc, #232]	; (8000e38 <test_input_data+0x168>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff7f 	bl	8000c54 <my_str_cmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d050      	beq.n	8000dfe <test_input_data+0x12e>
								mode_2 |= mode_2_auto;
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <test_input_data+0x164>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b33      	ldr	r3, [pc, #204]	; (8000e34 <test_input_data+0x164>)
 8000d68:	701a      	strb	r2, [r3, #0]
								mode_2 &= ~mode_2_manual;
 8000d6a:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <test_input_data+0x164>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <test_input_data+0x164>)
 8000d76:	701a      	strb	r2, [r3, #0]
							}
							break;}
 8000d78:	e041      	b.n	8000dfe <test_input_data+0x12e>
						case 'P': {
							// only manual can chande pwm duty cycle
							if(mode_2 & mode_2_manual){
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <test_input_data+0x164>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d03d      	beq.n	8000e02 <test_input_data+0x132>
								if ((rx_buff[cnt+2] == 'W')&&(rx_buff[cnt+3] == 'M')&&(rx_buff[cnt+6] == '$')){
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	4a28      	ldr	r2, [pc, #160]	; (8000e2c <test_input_data+0x15c>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	2b57      	cmp	r3, #87	; 0x57
 8000d90:	d137      	bne.n	8000e02 <test_input_data+0x132>
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	3303      	adds	r3, #3
 8000d96:	4a25      	ldr	r2, [pc, #148]	; (8000e2c <test_input_data+0x15c>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	2b4d      	cmp	r3, #77	; 0x4d
 8000d9c:	d131      	bne.n	8000e02 <test_input_data+0x132>
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	3306      	adds	r3, #6
 8000da2:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <test_input_data+0x15c>)
 8000da4:	5cd3      	ldrb	r3, [r2, r3]
 8000da6:	2b24      	cmp	r3, #36	; 0x24
 8000da8:	d12b      	bne.n	8000e02 <test_input_data+0x132>
									temp=rx_buff[cnt+4];
 8000daa:	89fb      	ldrh	r3, [r7, #14]
 8000dac:	3304      	adds	r3, #4
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <test_input_data+0x15c>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	737b      	strb	r3, [r7, #13]
									if ((temp <= '9')&&(temp >= '0')){
 8000db4:	7b7b      	ldrb	r3, [r7, #13]
 8000db6:	2b39      	cmp	r3, #57	; 0x39
 8000db8:	d823      	bhi.n	8000e02 <test_input_data+0x132>
 8000dba:	7b7b      	ldrb	r3, [r7, #13]
 8000dbc:	2b2f      	cmp	r3, #47	; 0x2f
 8000dbe:	d920      	bls.n	8000e02 <test_input_data+0x132>
										temp_2=rx_buff[cnt+5];
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	3305      	adds	r3, #5
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <test_input_data+0x15c>)
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	733b      	strb	r3, [r7, #12]
										if ((temp_2 <= '9')&&(temp_2 >= '0')){
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
 8000dcc:	2b39      	cmp	r3, #57	; 0x39
 8000dce:	d818      	bhi.n	8000e02 <test_input_data+0x132>
 8000dd0:	7b3b      	ldrb	r3, [r7, #12]
 8000dd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000dd4:	d915      	bls.n	8000e02 <test_input_data+0x132>
											temp-='0';
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	3b30      	subs	r3, #48	; 0x30
 8000dda:	737b      	strb	r3, [r7, #13]
											temp_2-='0';
 8000ddc:	7b3b      	ldrb	r3, [r7, #12]
 8000dde:	3b30      	subs	r3, #48	; 0x30
 8000de0:	733b      	strb	r3, [r7, #12]
											//setDutyCycle(10*temp+temp_2);
											PWM_duty_wish=10*temp+temp_2;
 8000de2:	7b7b      	ldrb	r3, [r7, #13]
 8000de4:	461a      	mov	r2, r3
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	7b3b      	ldrb	r3, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <test_input_data+0x16c>)
 8000df6:	701a      	strb	r2, [r3, #0]
										}
									}

								}
							}
							break;}
 8000df8:	e003      	b.n	8000e02 <test_input_data+0x132>
							break;}
 8000dfa:	bf00      	nop
 8000dfc:	e002      	b.n	8000e04 <test_input_data+0x134>
							break;}
 8000dfe:	bf00      	nop
 8000e00:	e000      	b.n	8000e04 <test_input_data+0x134>
							break;}
 8000e02:	bf00      	nop
	for(cnt=from;cnt<=to;cnt++){
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	3301      	adds	r3, #1
 8000e08:	81fb      	strh	r3, [r7, #14]
 8000e0a:	89fa      	ldrh	r2, [r7, #14]
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f67f af6a 	bls.w	8000ce8 <test_input_data+0x18>
					}
				}
	}
	if(reset_dma){
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <test_input_data+0x152>
		set_rx_dma_starting_point(max_rx_buff_size);
 8000e1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e1e:	f7ff fe43 	bl	8000aa8 <set_rx_dma_starting_point>
	}
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000028 	.word	0x20000028
 8000e30:	080027c8 	.word	0x080027c8
 8000e34:	20000027 	.word	0x20000027
 8000e38:	080027d0 	.word	0x080027d0
 8000e3c:	20000025 	.word	0x20000025

08000e40 <test_data>:

void test_data(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
	uint32_t dma_cnt;
	uint8_t *str,cnt;
	uint16_t copied;
	if ( ( (mode & mode_rx_full_was)==0x0 )&&( (mode & mode_rx_half_was)==0x0)&&(mode & mode_rx_idle_read_data) )
 8000e46:	4b2c      	ldr	r3, [pc, #176]	; (8000ef8 <test_data+0xb8>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d119      	bne.n	8000e86 <test_data+0x46>
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <test_data+0xb8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d113      	bne.n	8000e86 <test_data+0x46>
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <test_data+0xb8>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00d      	beq.n	8000e86 <test_data+0x46>
		{dma_cnt=max_rx_buff_size-DMA1_Channel6->CNDTR;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <test_data+0xbc>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e72:	607b      	str	r3, [r7, #4]
		 test_input_data(0,(uint8_t) dma_cnt,1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff ff26 	bl	8000cd0 <test_input_data>
 8000e84:	e035      	b.n	8000ef2 <test_data+0xb2>
		return;}
	if (mode & mode_rx_half_was){
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <test_data+0xb8>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d02a      	beq.n	8000ee8 <test_data+0xa8>
		if ((mode & mode_rx_idle_read_data)==0){
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <test_data+0xb8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d124      	bne.n	8000ee8 <test_data+0xa8>
			// arrived just half, we need to check all arrived data
			test_input_data(0,max_rx_buff_size>>1,0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff ff14 	bl	8000cd0 <test_input_data>
			// find '$' and copy
			str=&rx_buff[max_rx_buff_size>>1];
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <test_data+0xc0>)
 8000eaa:	60fb      	str	r3, [r7, #12]
			for (cnt=0;cnt<=10;cnt++){
 8000eac:	2300      	movs	r3, #0
 8000eae:	72fb      	strb	r3, [r7, #11]
 8000eb0:	e009      	b.n	8000ec6 <test_data+0x86>
				if (*str=='$'){
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b24      	cmp	r3, #36	; 0x24
 8000eb8:	d009      	beq.n	8000ece <test_data+0x8e>
					break;
				}
				str-=1;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
			for (cnt=0;cnt<=10;cnt++){
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	72fb      	strb	r3, [r7, #11]
 8000ec6:	7afb      	ldrb	r3, [r7, #11]
 8000ec8:	2b0a      	cmp	r3, #10
 8000eca:	d9f2      	bls.n	8000eb2 <test_data+0x72>
 8000ecc:	e000      	b.n	8000ed0 <test_data+0x90>
					break;
 8000ece:	bf00      	nop
			}
			// copy
			my_str_cpy(temp_buff,str, &copied, cnt);
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	1cba      	adds	r2, r7, #2
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <test_data+0xc4>)
 8000eda:	f7ff fd8b 	bl	80009f4 <my_str_cpy>
			next_char=&temp_buff[cnt];
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <test_data+0xc4>)
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <test_data+0xc8>)
 8000ee6:	6013      	str	r3, [r2, #0]
		if (mode & mode_rx_idle_read_data){
			// half arrived, we need to check all arrived bytes

		}
	}
	if (mode & mode_rx_full_was){
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <test_data+0xb8>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	f003 0320 	and.w	r3, r3, #32
 8000ef0:	2b00      	cmp	r3, #0
		}



	}
}
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000026 	.word	0x20000026
 8000efc:	4002006c 	.word	0x4002006c
 8000f00:	200000a8 	.word	0x200000a8
 8000f04:	2000012c 	.word	0x2000012c
 8000f08:	20000000 	.word	0x20000000

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff fbca 	bl	80006ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f18:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000f1c:	f7ff fbae 	bl	800067c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f7ff f951 	bl	80001c8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f26:	f000 f88f 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2a:	f000 fa51 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2e:	f000 fa27 	bl	8001380 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f32:	f000 f979 	bl	8001228 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000f36:	f000 f93f 	bl	80011b8 <MX_TIM17_Init>
  MX_TIM2_Init();
 8000f3a:	f000 f8b7 	bl	80010ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  my_str_cpy(tx_buff,(uint8_t *)"uC is ready\r",&temp,max_tx_buff_size);
 8000f3e:	1dba      	adds	r2, r7, #6
 8000f40:	2320      	movs	r3, #32
 8000f42:	493d      	ldr	r1, [pc, #244]	; (8001038 <main+0x12c>)
 8000f44:	483d      	ldr	r0, [pc, #244]	; (800103c <main+0x130>)
 8000f46:	f7ff fd55 	bl	80009f4 <my_str_cpy>
  inic_dma_tx(temp);
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fd83 	bl	8000a58 <inic_dma_tx>
  inic_dma_rx_and_it_ilde(max_rx_buff_size);
 8000f52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f56:	f7ff fdc3 	bl	8000ae0 <inic_dma_rx_and_it_ilde>
  enable_dma_and_transmitt(temp);
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fdf1 	bl	8000b44 <enable_dma_and_transmitt>

  start_tim17_with_IT();
 8000f62:	f7ff fe0b 	bl	8000b7c <start_tim17_with_IT>

  // pwm
  setDutyCycle(50);
 8000f66:	2032      	movs	r0, #50	; 0x32
 8000f68:	f7ff fe9a 	bl	8000ca0 <setDutyCycle>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f72:	f7ff fc05 	bl	8000780 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM2);
 8000f76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f7a:	f7ff fbd1 	bl	8000720 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);
 8000f7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f82:	f7ff fce3 	bl	800094c <LL_TIM_EnableIT_UPDATE>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000f86:	201c      	movs	r0, #28
 8000f88:	f7ff f950 	bl	800022c <__NVIC_EnableIRQ>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mode=0;
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <main+0x134>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
  mode_2=0;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <main+0x138>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  //mode_2 |= mode_2_auto;
  mode_2 |= mode_2_manual;
 8000f98:	4b2a      	ldr	r3, [pc, #168]	; (8001044 <main+0x138>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <main+0x138>)
 8000fa4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  __WFI();
 8000fa6:	bf30      	wfi
	  if(mode & mode_1_sec){
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <main+0x134>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d008      	beq.n	8000fc6 <main+0xba>
		  tim_17_1_sec_delay();
 8000fb4:	f7ff fe18 	bl	8000be8 <tim_17_1_sec_delay>
		  mode &= ~mode_1_sec;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <main+0x134>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <main+0x134>)
 8000fc4:	701a      	strb	r2, [r3, #0]
	  }
	  if(mode & mode_rx_idle_read_data){
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <main+0x134>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d008      	beq.n	8000fe4 <main+0xd8>
		  test_data();
 8000fd2:	f7ff ff35 	bl	8000e40 <test_data>
		  //dma_cnt=max_rx_buff_size-DMA1_Channel6->CNDTR;
		  //test_input_data(0,(uint8_t) dma_cnt,1);
		  mode &= ~mode_rx_idle_read_data;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <main+0x134>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	f023 0308 	bic.w	r3, r3, #8
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <main+0x134>)
 8000fe2:	701a      	strb	r2, [r3, #0]
	  }
	  if(mode & mode_rx_buff_full){
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <main+0x134>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d013      	beq.n	8001018 <main+0x10c>
		  mode |= mode_rx_full_was;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <main+0x134>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <main+0x134>)
 8000ffc:	701a      	strb	r2, [r3, #0]
		  test_data();
 8000ffe:	f7ff ff1f 	bl	8000e40 <test_data>
		  // maybe to code:[merge strings] find last '$'-> save from the last '$' to tempomary array ->
		  //	-> wait until data recieve WITH '$' -> find position of '$' in new array ->
		  //	-> merge tempomary array with new array[from 0 to position of '$'] -> and this need to be tested...

		  //tempomary code start
		  set_rx_dma_starting_point(max_rx_buff_size);
 8001002:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001006:	f7ff fd4f 	bl	8000aa8 <set_rx_dma_starting_point>
		  //tempomary code end
		  mode &=~ mode_rx_buff_full;
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <main+0x134>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f023 0302 	bic.w	r3, r3, #2
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <main+0x134>)
 8001016:	701a      	strb	r2, [r3, #0]
	  }
	  if (mode & mode_rx_buff_half){
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <main+0x134>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0c0      	beq.n	8000fa6 <main+0x9a>
		  mode |= mode_rx_half_was ;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <main+0x134>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <main+0x134>)
 8001030:	701a      	strb	r2, [r3, #0]
		  test_data();
 8001032:	f7ff ff05 	bl	8000e40 <test_data>
	  __WFI();
 8001036:	e7b6      	b.n	8000fa6 <main+0x9a>
 8001038:	080027d8 	.word	0x080027d8
 800103c:	20000140 	.word	0x20000140
 8001040:	20000026 	.word	0x20000026
 8001044:	20000027 	.word	0x20000027

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fb45 	bl	80006dc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001052:	bf00      	nop
 8001054:	f7ff fb56 	bl	8000704 <LL_FLASH_GetLatency>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1fa      	bne.n	8001054 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800105e:	f7ff fa5f 	bl	8000520 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001062:	bf00      	nop
 8001064:	f7ff fa6c 	bl	8000540 <LL_RCC_HSI_IsReady>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d1fa      	bne.n	8001064 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800106e:	2010      	movs	r0, #16
 8001070:	f7ff fa78 	bl	8000564 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff faad 	bl	80005d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fabe 	bl	80005fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff facf 	bl	8000624 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fa82 	bl	8000590 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800108c:	bf00      	nop
 800108e:	f7ff fa93 	bl	80005b8 <LL_RCC_GetSysClkSource>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1fa      	bne.n	800108e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <SystemClock_Config+0x60>)
 800109a:	f001 fb23 	bl	80026e4 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800109e:	4802      	ldr	r0, [pc, #8]	; (80010a8 <SystemClock_Config+0x60>)
 80010a0:	f001 fb2e 	bl	8002700 <LL_SetSystemCoreClock>
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	007a1200 	.word	0x007a1200

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b094      	sub	sp, #80	; 0x50
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2220      	movs	r2, #32
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 fb4c 	bl	8002768 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff facb 	bl	800067c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010e6:	f7ff f893 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f8e3 	bl	80002bc <NVIC_EncodePriority>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4619      	mov	r1, r3
 80010fa:	201c      	movs	r0, #28
 80010fc:	f7ff f8b4 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001100:	201c      	movs	r0, #28
 8001102:	f7ff f893 	bl	800022c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8001106:	f240 331f 	movw	r3, #799	; 0x31f
 800110a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800110c:	2300      	movs	r3, #0
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8001110:	2363      	movs	r3, #99	; 0x63
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001118:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001122:	f000 fe95 	bl	8001e50 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8001126:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800112a:	f7ff fb09 	bl	8000740 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800112e:	2100      	movs	r1, #0
 8001130:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001134:	f7ff fbd2 	bl	80008dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8001138:	2101      	movs	r1, #1
 800113a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800113e:	f7ff fb7f 	bl	8000840 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 50;
 800114e:	2332      	movs	r3, #50	; 0x32
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	461a      	mov	r2, r3
 800115c:	2101      	movs	r1, #1
 800115e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001162:	f000 fee7 	bl	8001f34 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001166:	2101      	movs	r1, #1
 8001168:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800116c:	f7ff fb1a 	bl	80007a4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001170:	2100      	movs	r1, #0
 8001172:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001176:	f7ff fbc6 	bl	8000906 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800117a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800117e:	f7ff fbd5 	bl	800092c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001182:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001186:	f7ff fa61 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800118a:	2320      	movs	r3, #32
 800118c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800118e:	2302      	movs	r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f000 fbb1 	bl	8001910 <LL_GPIO_Init>

}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 80011cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011d0:	f7ff fa6c 	bl	80006ac <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011d4:	f7ff f81c 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80011d8:	4603      	mov	r3, r0
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f86c 	bl	80002bc <NVIC_EncodePriority>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	201a      	movs	r0, #26
 80011ea:	f7ff f83d 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011ee:	201a      	movs	r0, #26
 80011f0:	f7ff f81c 	bl	800022c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 7999;
 80011f4:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80011f8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 80011fe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001202:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_TIM17_Init+0x6c>)
 8001212:	f000 fe1d 	bl	8001e50 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM17_Init+0x6c>)
 8001218:	f7ff faa2 	bl	8000760 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40014800 	.word	0x40014800

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001252:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001256:	f7ff fa11 	bl	800067c <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800125a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800125e:	f7ff f9f5 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001262:	f248 0304 	movw	r3, #32772	; 0x8004
 8001266:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001278:	2307      	movs	r3, #7
 800127a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f000 fb44 	bl	8001910 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001288:	2200      	movs	r2, #0
 800128a:	2106      	movs	r1, #6
 800128c:	483a      	ldr	r0, [pc, #232]	; (8001378 <MX_USART2_UART_Init+0x150>)
 800128e:	f7ff f849 	bl	8000324 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001292:	2200      	movs	r2, #0
 8001294:	2106      	movs	r1, #6
 8001296:	4838      	ldr	r0, [pc, #224]	; (8001378 <MX_USART2_UART_Init+0x150>)
 8001298:	f7ff f91e 	bl	80004d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800129c:	2200      	movs	r2, #0
 800129e:	2106      	movs	r1, #6
 80012a0:	4835      	ldr	r0, [pc, #212]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012a2:	f7ff f865 	bl	8000370 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2106      	movs	r1, #6
 80012aa:	4833      	ldr	r0, [pc, #204]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012ac:	f7ff f884 	bl	80003b8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	2106      	movs	r1, #6
 80012b4:	4830      	ldr	r0, [pc, #192]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012b6:	f7ff f8a3 	bl	8000400 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2106      	movs	r1, #6
 80012be:	482e      	ldr	r0, [pc, #184]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012c0:	f7ff f8c2 	bl	8000448 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2106      	movs	r1, #6
 80012c8:	482b      	ldr	r0, [pc, #172]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012ca:	f7ff f8e1 	bl	8000490 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012ce:	2210      	movs	r2, #16
 80012d0:	2107      	movs	r1, #7
 80012d2:	4829      	ldr	r0, [pc, #164]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012d4:	f7ff f826 	bl	8000324 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 80012d8:	2200      	movs	r2, #0
 80012da:	2107      	movs	r1, #7
 80012dc:	4826      	ldr	r0, [pc, #152]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012de:	f7ff f8fb 	bl	80004d8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2107      	movs	r1, #7
 80012e6:	4824      	ldr	r0, [pc, #144]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012e8:	f7ff f842 	bl	8000370 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2107      	movs	r1, #7
 80012f0:	4821      	ldr	r0, [pc, #132]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012f2:	f7ff f861 	bl	80003b8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	2107      	movs	r1, #7
 80012fa:	481f      	ldr	r0, [pc, #124]	; (8001378 <MX_USART2_UART_Init+0x150>)
 80012fc:	f7ff f880 	bl	8000400 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001300:	2200      	movs	r2, #0
 8001302:	2107      	movs	r1, #7
 8001304:	481c      	ldr	r0, [pc, #112]	; (8001378 <MX_USART2_UART_Init+0x150>)
 8001306:	f7ff f89f 	bl	8000448 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800130a:	2200      	movs	r2, #0
 800130c:	2107      	movs	r1, #7
 800130e:	481a      	ldr	r0, [pc, #104]	; (8001378 <MX_USART2_UART_Init+0x150>)
 8001310:	f7ff f8be 	bl	8000490 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001314:	f7fe ff7c 	bl	8000210 <__NVIC_GetPriorityGrouping>
 8001318:	4603      	mov	r3, r0
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ffcc 	bl	80002bc <NVIC_EncodePriority>
 8001324:	4603      	mov	r3, r0
 8001326:	4619      	mov	r1, r3
 8001328:	2026      	movs	r0, #38	; 0x26
 800132a:	f7fe ff9d 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800132e:	2026      	movs	r0, #38	; 0x26
 8001330:	f7fe ff7c 	bl	800022c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001334:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001338:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001346:	230c      	movs	r3, #12
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART2_UART_Init+0x154>)
 800135a:	f001 f93d 	bl	80025d8 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <MX_USART2_UART_Init+0x154>)
 8001360:	f7ff fb2a 	bl	80009b8 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <MX_USART2_UART_Init+0x154>)
 8001366:	f7ff fb11 	bl	800098c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800136a:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART2_UART_Init+0x154>)
 800136c:	f7ff fafe 	bl	800096c <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020000 	.word	0x40020000
 800137c:	40004400 	.word	0x40004400

08001380 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff f961 	bl	800064c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800138a:	f7fe ff41 	bl	8000210 <__NVIC_GetPriorityGrouping>
 800138e:	4603      	mov	r3, r0
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff91 	bl	80002bc <NVIC_EncodePriority>
 800139a:	4603      	mov	r3, r0
 800139c:	4619      	mov	r1, r3
 800139e:	2010      	movs	r0, #16
 80013a0:	f7fe ff62 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013a4:	2010      	movs	r0, #16
 80013a6:	f7fe ff41 	bl	800022c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013aa:	f7fe ff31 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe ff81 	bl	80002bc <NVIC_EncodePriority>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4619      	mov	r1, r3
 80013be:	2011      	movs	r0, #17
 80013c0:	f7fe ff52 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013c4:	2011      	movs	r0, #17
 80013c6:	f7fe ff31 	bl	800022c <__NVIC_EnableIRQ>

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80013e6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80013ea:	f7ff f92f 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80013ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013f2:	f7ff f92b 	bl	800064c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80013fa:	f7ff f927 	bl	800064c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(led_GPIO_Port, led_Pin);
 80013fe:	2108      	movs	r1, #8
 8001400:	480a      	ldr	r0, [pc, #40]	; (800142c <MX_GPIO_Init+0x5c>)
 8001402:	f7ff fae9 	bl	80009d8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = led_Pin;
 8001406:	2308      	movs	r3, #8
 8001408:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <MX_GPIO_Init+0x5c>)
 8001420:	f000 fa76 	bl	8001910 <LL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	48000400 	.word	0x48000400

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	// dma rx receive
	if (DMA1->ISR & DMA_ISR_TCIF6)
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <DMA1_Channel6_IRQHandler+0x50>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <DMA1_Channel6_IRQHandler+0x24>
		{mode |= mode_rx_buff_full;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <DMA1_Channel6_IRQHandler+0x54>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <DMA1_Channel6_IRQHandler+0x54>)
 80014ac:	701a      	strb	r2, [r3, #0]
		DMA1_Channel6->CNDTR=max_rx_buff_size;}
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <DMA1_Channel6_IRQHandler+0x58>)
 80014b0:	22ff      	movs	r2, #255	; 0xff
 80014b2:	605a      	str	r2, [r3, #4]
	if (DMA1->ISR & DMA_ISR_HTIF6)
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <DMA1_Channel6_IRQHandler+0x50>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <DMA1_Channel6_IRQHandler+0x3e>
		mode |= mode_rx_buff_half;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <DMA1_Channel6_IRQHandler+0x54>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <DMA1_Channel6_IRQHandler+0x54>)
 80014cc:	701a      	strb	r2, [r3, #0]
	DMA1->IFCR = DMA_IFCR_CGIF6;//clear flag
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <DMA1_Channel6_IRQHandler+0x50>)
 80014d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d4:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40020000 	.word	0x40020000
 80014e4:	20000026 	.word	0x20000026
 80014e8:	4002006c 	.word	0x4002006c

080014ec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

	//trasmission ended
	if (DMA1->ISR & DMA_ISR_TCIF7 ){
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <DMA1_Channel7_IRQHandler+0x30>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <DMA1_Channel7_IRQHandler+0x24>
		DMA1_Channel7->CCR &=~(DMA_CCR_EN);//disable channel
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <DMA1_Channel7_IRQHandler+0x34>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <DMA1_Channel7_IRQHandler+0x34>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]

		DMA1->IFCR = DMA_IFCR_CGIF7;//clear flag
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <DMA1_Channel7_IRQHandler+0x30>)
 800150a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800150e:	605a      	str	r2, [r3, #4]
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40020000 	.word	0x40020000
 8001520:	40020080 	.word	0x40020080

08001524 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	mode |= mode_1_sec;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8001534:	701a      	strb	r2, [r3, #0]
	TIM17->SR &=~(TIM_SR_UIF);
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	20000026 	.word	0x20000026
 8001550:	40014800 	.word	0x40014800

08001554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
	if(TIM2->SR & TIM_SR_UIF){
 8001558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d067      	beq.n	8001636 <TIM2_IRQHandler+0xe2>
		//LL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
		if(mode_2 & mode_2_auto){
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <TIM2_IRQHandler+0xe8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d032      	beq.n	80015d8 <TIM2_IRQHandler+0x84>
			if(mode & mode_fade){
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <TIM2_IRQHandler+0xec>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <TIM2_IRQHandler+0x58>
				// duty --
				if(PWM_duty_cycle>=1){
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <TIM2_IRQHandler+0xf0>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <TIM2_IRQHandler+0x42>
					setDutyCycle(PWM_duty_cycle-1);
 8001586:	4b2f      	ldr	r3, [pc, #188]	; (8001644 <TIM2_IRQHandler+0xf0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb86 	bl	8000ca0 <setDutyCycle>
 8001594:	e020      	b.n	80015d8 <TIM2_IRQHandler+0x84>
				}
				else{
					mode &= ~mode_fade;
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <TIM2_IRQHandler+0xec>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b27      	ldr	r3, [pc, #156]	; (8001640 <TIM2_IRQHandler+0xec>)
 80015a2:	701a      	strb	r2, [r3, #0]
					setDutyCycle(1);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fb7b 	bl	8000ca0 <setDutyCycle>
 80015aa:	e015      	b.n	80015d8 <TIM2_IRQHandler+0x84>
				}
			}
			else{
				// duty ++
				if(PWM_duty_cycle<=98){
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <TIM2_IRQHandler+0xf0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b62      	cmp	r3, #98	; 0x62
 80015b2:	d807      	bhi.n	80015c4 <TIM2_IRQHandler+0x70>
					setDutyCycle(PWM_duty_cycle+1);
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <TIM2_IRQHandler+0xf0>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb6f 	bl	8000ca0 <setDutyCycle>
 80015c2:	e009      	b.n	80015d8 <TIM2_IRQHandler+0x84>
				}
				else{
					mode |= mode_fade;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <TIM2_IRQHandler+0xec>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <TIM2_IRQHandler+0xec>)
 80015d0:	701a      	strb	r2, [r3, #0]
					setDutyCycle(98);
 80015d2:	2062      	movs	r0, #98	; 0x62
 80015d4:	f7ff fb64 	bl	8000ca0 <setDutyCycle>
				}

			}
		}
		if(mode_2 & mode_2_manual){
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <TIM2_IRQHandler+0xe8>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <TIM2_IRQHandler+0xd2>
			if (PWM_duty_cycle != PWM_duty_wish){
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <TIM2_IRQHandler+0xf0>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <TIM2_IRQHandler+0xf4>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d01a      	beq.n	8001626 <TIM2_IRQHandler+0xd2>
				if (PWM_duty_cycle < PWM_duty_wish){
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <TIM2_IRQHandler+0xf0>)
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <TIM2_IRQHandler+0xf4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <TIM2_IRQHandler+0xb8>
					setDutyCycle(PWM_duty_cycle+1);
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <TIM2_IRQHandler+0xf0>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb4b 	bl	8000ca0 <setDutyCycle>
 800160a:	e00c      	b.n	8001626 <TIM2_IRQHandler+0xd2>
				}
				else{
					if(PWM_duty_cycle > PWM_duty_wish){
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <TIM2_IRQHandler+0xf0>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <TIM2_IRQHandler+0xf4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d906      	bls.n	8001626 <TIM2_IRQHandler+0xd2>
						setDutyCycle(PWM_duty_cycle-1);
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <TIM2_IRQHandler+0xf0>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3b01      	subs	r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fb3d 	bl	8000ca0 <setDutyCycle>
					}
				}
			}
		}
		TIM2->SR &=~(TIM_SR_UIF);
 8001626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6113      	str	r3, [r2, #16]
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000027 	.word	0x20000027
 8001640:	20000026 	.word	0x20000026
 8001644:	20000024 	.word	0x20000024
 8001648:	20000025 	.word	0x20000025

0800164c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(USART2->ISR & USART_ISR_IDLE)
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <USART2_IRQHandler+0x34>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	f003 0310 	and.w	r3, r3, #16
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <USART2_IRQHandler+0x2a>
		{
		mode |= mode_rx_idle_read_data;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <USART2_IRQHandler+0x38>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <USART2_IRQHandler+0x38>)
 8001668:	701a      	strb	r2, [r3, #0]
		USART2->ICR |= USART_ICR_IDLECF; //clear flag
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <USART2_IRQHandler+0x34>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <USART2_IRQHandler+0x34>)
 8001670:	f043 0310 	orr.w	r3, r3, #16
 8001674:	6213      	str	r3, [r2, #32]
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40004400 	.word	0x40004400
 8001684:	20000026 	.word	0x20000026

08001688 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <SystemInit+0x28>)
 800168e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001692:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <SystemInit+0x28>)
 8001694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <SystemInit+0x28>)
 800169e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a2:	609a      	str	r2, [r3, #8]
#endif
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
	ldr	r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <LoopForever+0x16>)
	cmp	r2, r3
 80016da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016de:	f7ff ffd3 	bl	8001688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f001 f81d 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e6:	f7ff fc11 	bl	8000f0c <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016ec:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80016f0:	08002828 	.word	0x08002828
	ldr	r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016f8:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 80016fc:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8001700:	20000160 	.word	0x20000160

08001704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_2_IRQHandler>

08001706 <LL_GPIO_SetPinMode>:
{
 8001706:	b480      	push	{r7}
 8001708:	b089      	sub	sp, #36	; 0x24
 800170a:	af00      	add	r7, sp, #0
 800170c:	60f8      	str	r0, [r7, #12]
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fab3 f383 	clz	r3, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2103      	movs	r1, #3
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa93 f3a3 	rbit	r3, r3
 8001740:	61bb      	str	r3, [r7, #24]
  return result;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	601a      	str	r2, [r3, #0]
}
 8001758:	bf00      	nop
 800175a:	3724      	adds	r7, #36	; 0x24
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_GPIO_SetPinOutputType>:
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	431a      	orrs	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_GPIO_SetPinSpeed>:
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	613b      	str	r3, [r7, #16]
  return result;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2103      	movs	r1, #3
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	fa93 f3a3 	rbit	r3, r3
 80017ce:	61bb      	str	r3, [r7, #24]
  return result;
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	609a      	str	r2, [r3, #8]
}
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	; 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_GPIO_SetPinPull>:
{
 80017f2:	b480      	push	{r7}
 80017f4:	b089      	sub	sp, #36	; 0x24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	613b      	str	r3, [r7, #16]
  return result;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fab3 f383 	clz	r3, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2103      	movs	r1, #3
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa93 f3a3 	rbit	r3, r3
 800182c:	61bb      	str	r3, [r7, #24]
  return result;
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	431a      	orrs	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	60da      	str	r2, [r3, #12]
}
 8001844:	bf00      	nop
 8001846:	3724      	adds	r7, #36	; 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_GPIO_SetAFPin_0_7>:
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa93 f3a3 	rbit	r3, r3
 800186a:	613b      	str	r3, [r7, #16]
  return result;
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	210f      	movs	r1, #15
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	401a      	ands	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	61bb      	str	r3, [r7, #24]
  return result;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fab3 f383 	clz	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	621a      	str	r2, [r3, #32]
}
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_GPIO_SetAFPin_8_15>:
{
 80018ae:	b480      	push	{r7}
 80018b0:	b089      	sub	sp, #36	; 0x24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa93 f3a3 	rbit	r3, r3
 80018ca:	613b      	str	r3, [r7, #16]
  return result;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	210f      	movs	r1, #15
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa93 f3a3 	rbit	r3, r3
 80018ec:	61bb      	str	r3, [r7, #24]
  return result;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001904:	bf00      	nop
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	613b      	str	r3, [r7, #16]
  return result;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	fab3 f383 	clz	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001932:	e051      	b.n	80019d8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d043      	beq.n	80019d2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d003      	beq.n	800195a <LL_GPIO_Init+0x4a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d10e      	bne.n	8001978 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	461a      	mov	r2, r3
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ff16 	bl	8001794 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	461a      	mov	r2, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fef6 	bl	8001764 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	461a      	mov	r2, r3
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff36 	bl	80017f2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d11a      	bne.n	80019c4 <LL_GPIO_Init+0xb4>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	60bb      	str	r3, [r7, #8]
  return result;
 800199a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	d807      	bhi.n	80019b6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	461a      	mov	r2, r3
 80019ac:	69b9      	ldr	r1, [r7, #24]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff4e 	bl	8001850 <LL_GPIO_SetAFPin_0_7>
 80019b4:	e006      	b.n	80019c4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	461a      	mov	r2, r3
 80019bc:	69b9      	ldr	r1, [r7, #24]
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff75 	bl	80018ae <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	461a      	mov	r2, r3
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fe9a 	bl	8001706 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3301      	adds	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1a6      	bne.n	8001934 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <LL_RCC_HSI_IsReady>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <LL_RCC_HSI_IsReady+0x20>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40021000 	.word	0x40021000

08001a14 <LL_RCC_LSE_IsReady>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_RCC_LSE_IsReady+0x20>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	bf0c      	ite	eq
 8001a24:	2301      	moveq	r3, #1
 8001a26:	2300      	movne	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000

08001a38 <LL_RCC_GetSysClkSource>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <LL_RCC_GetSysClkSource+0x18>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000

08001a54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <LL_RCC_GetAHBPrescaler+0x18>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40021000 	.word	0x40021000

08001a8c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <LL_RCC_GetUSARTClockSource+0x28>)
 8001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	061b      	lsls	r3, r3, #24
 8001ac2:	4313      	orrs	r3, r2
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <LL_RCC_PLL_GetMainSource+0x18>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <LL_RCC_PLL_GetPrediv+0x18>)
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	f003 030f 	and.w	r3, r3, #15
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000

08001b28 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b30:	f000 f860 	bl	8001bf4 <RCC_GetSystemClockFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f87a 	bl	8001c38 <RCC_GetHCLKClockFreq>
 8001b44:	4602      	mov	r2, r0
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f888 	bl	8001c64 <RCC_GetPCLK1ClockFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 f894 	bl	8001c8c <RCC_GetPCLK2ClockFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d12a      	bne.n	8001bdc <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff8e 	bl	8001aa8 <LL_RCC_GetUSARTClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d00f      	beq.n	8001bb2 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	d005      	beq.n	8001ba2 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d114      	bne.n	8001bc4 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001b9a:	f000 f82b 	bl	8001bf4 <RCC_GetSystemClockFreq>
 8001b9e:	60f8      	str	r0, [r7, #12]
        break;
 8001ba0:	e021      	b.n	8001be6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001ba2:	f7ff ff25 	bl	80019f0 <LL_RCC_HSI_IsReady>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001bae:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bb0:	e016      	b.n	8001be0 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001bb2:	f7ff ff2f 	bl	8001a14 <LL_RCC_LSE_IsReady>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bc2:	e00f      	b.n	8001be4 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001bc4:	f000 f816 	bl	8001bf4 <RCC_GetSystemClockFreq>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f834 	bl	8001c38 <RCC_GetHCLKClockFreq>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f846 	bl	8001c64 <RCC_GetPCLK1ClockFreq>
 8001bd8:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001bda:	e004      	b.n	8001be6 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001bdc:	bf00      	nop
 8001bde:	e002      	b.n	8001be6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001be4:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001bfe:	f7ff ff1b 	bl	8001a38 <LL_RCC_GetSysClkSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d006      	beq.n	8001c16 <RCC_GetSystemClockFreq+0x22>
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d007      	beq.n	8001c1c <RCC_GetSystemClockFreq+0x28>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d109      	bne.n	8001c24 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <RCC_GetSystemClockFreq+0x40>)
 8001c12:	607b      	str	r3, [r7, #4]
      break;
 8001c14:	e009      	b.n	8001c2a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <RCC_GetSystemClockFreq+0x40>)
 8001c18:	607b      	str	r3, [r7, #4]
      break;
 8001c1a:	e006      	b.n	8001c2a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001c1c:	f000 f84a 	bl	8001cb4 <RCC_PLL_GetFreqDomain_SYS>
 8001c20:	6078      	str	r0, [r7, #4]
      break;
 8001c22:	e002      	b.n	8001c2a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <RCC_GetSystemClockFreq+0x40>)
 8001c26:	607b      	str	r3, [r7, #4]
      break;
 8001c28:	bf00      	nop
  }

  return frequency;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	007a1200 	.word	0x007a1200

08001c38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c40:	f7ff ff08 	bl	8001a54 <LL_RCC_GetAHBPrescaler>
 8001c44:	4603      	mov	r3, r0
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <RCC_GetHCLKClockFreq+0x28>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	40d3      	lsrs	r3, r2
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08002808 	.word	0x08002808

08001c64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c6c:	f7ff ff00 	bl	8001a70 <LL_RCC_GetAPB1Prescaler>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <RCC_GetPCLK1ClockFreq+0x24>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	40d3      	lsrs	r3, r2
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08002818 	.word	0x08002818

08001c8c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c94:	f7ff fefa 	bl	8001a8c <LL_RCC_GetAPB2Prescaler>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	0adb      	lsrs	r3, r3, #11
 8001c9c:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <RCC_GetPCLK2ClockFreq+0x24>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	40d3      	lsrs	r3, r2
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08002818 	.word	0x08002818

08001cb4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001cb4:	b590      	push	{r4, r7, lr}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001cc2:	f7ff ff07 	bl	8001ad4 <LL_RCC_PLL_GetMainSource>
 8001cc6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d003      	beq.n	8001cdc <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001cd4:	e005      	b.n	8001ce2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001cd8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001cda:	e005      	b.n	8001ce8 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001cde:	60fb      	str	r3, [r7, #12]
      break;
 8001ce0:	e002      	b.n	8001ce8 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ce4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001ce6:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001ce8:	f7ff ff10 	bl	8001b0c <LL_RCC_PLL_GetPrediv>
 8001cec:	4603      	mov	r3, r0
 8001cee:	3301      	adds	r3, #1
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	fbb2 f4f3 	udiv	r4, r2, r3
 8001cf6:	f7ff fefb 	bl	8001af0 <LL_RCC_PLL_GetMultiplicator>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	fa92 f2a2 	rbit	r2, r2
 8001d0c:	603a      	str	r2, [r7, #0]
  return result;
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	40d3      	lsrs	r3, r2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	003d0900 	.word	0x003d0900
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <LL_TIM_SetPrescaler>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_TIM_SetAutoReload>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_TIM_SetRepetitionCounter>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_TIM_OC_SetCompareCH1>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_TIM_OC_SetCompareCH2>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_TIM_OC_SetCompareCH3>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_TIM_OC_SetCompareCH4>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_TIM_OC_SetCompareCH5>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_TIM_OC_SetCompareCH6>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	615a      	str	r2, [r3, #20]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <LL_TIM_Init+0xd0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <LL_TIM_Init+0x28>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6e:	d003      	beq.n	8001e78 <LL_TIM_Init+0x28>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <LL_TIM_Init+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d106      	bne.n	8001e86 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <LL_TIM_Init+0xd0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <LL_TIM_Init+0x66>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d00f      	beq.n	8001eb6 <LL_TIM_Init+0x66>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <LL_TIM_Init+0xd4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00b      	beq.n	8001eb6 <LL_TIM_Init+0x66>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <LL_TIM_Init+0xd8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d007      	beq.n	8001eb6 <LL_TIM_Init+0x66>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <LL_TIM_Init+0xdc>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d003      	beq.n	8001eb6 <LL_TIM_Init+0x66>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <LL_TIM_Init+0xe0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d106      	bne.n	8001ec4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff3b 	bl	8001d4c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff27 	bl	8001d30 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LL_TIM_Init+0xd0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00b      	beq.n	8001f02 <LL_TIM_Init+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <LL_TIM_Init+0xd8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <LL_TIM_Init+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <LL_TIM_Init+0xdc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d003      	beq.n	8001f02 <LL_TIM_Init+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <LL_TIM_Init+0xe0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d105      	bne.n	8001f0e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7c1b      	ldrb	r3, [r3, #16]
 8001f06:	4619      	mov	r1, r3
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff2d 	bl	8001d68 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff8e 	bl	8001e30 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40014000 	.word	0x40014000
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40014800 	.word	0x40014800

08001f34 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f4a:	d01f      	beq.n	8001f8c <LL_TIM_OC_Init+0x58>
 8001f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f50:	d804      	bhi.n	8001f5c <LL_TIM_OC_Init+0x28>
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d00c      	beq.n	8001f70 <LL_TIM_OC_Init+0x3c>
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d011      	beq.n	8001f7e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001f5a:	e033      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d022      	beq.n	8001fa8 <LL_TIM_OC_Init+0x74>
 8001f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f66:	d026      	beq.n	8001fb6 <LL_TIM_OC_Init+0x82>
 8001f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f6c:	d015      	beq.n	8001f9a <LL_TIM_OC_Init+0x66>
      break;
 8001f6e:	e029      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f82c 	bl	8001fd0 <OC1Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8001f7c:	e022      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 f89f 	bl	80020c4 <OC2Config>
 8001f86:	4603      	mov	r3, r0
 8001f88:	75fb      	strb	r3, [r7, #23]
      break;
 8001f8a:	e01b      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f916 	bl	80021c0 <OC3Config>
 8001f94:	4603      	mov	r3, r0
 8001f96:	75fb      	strb	r3, [r7, #23]
      break;
 8001f98:	e014      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f98d 	bl	80022bc <OC4Config>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8001fa6:	e00d      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f9ec 	bl	8002388 <OC5Config>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8001fb4:	e006      	b.n	8001fc4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fa43 	bl	8002444 <OC6Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8001fc2:	bf00      	nop
  }

  return result;
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f023 0201 	bic.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6812      	ldr	r2, [r2, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f023 0202 	bic.w	r2, r3, #2
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f023 0201 	bic.w	r2, r3, #1
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <OC1Config+0xe4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d00b      	beq.n	800204e <OC1Config+0x7e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1f      	ldr	r2, [pc, #124]	; (80020b8 <OC1Config+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <OC1Config+0x7e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1e      	ldr	r2, [pc, #120]	; (80020bc <OC1Config+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <OC1Config+0x7e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <OC1Config+0xf0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11e      	bne.n	800208c <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f023 0208 	bic.w	r2, r3, #8
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f023 0204 	bic.w	r2, r3, #4
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4313      	orrs	r3, r2
 800206c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe70 	bl	8001d84 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40014400 	.word	0x40014400
 80020c0:	40014800 	.word	0x40014800

080020c4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	f023 0210 	bic.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0220 	bic.w	r2, r3, #32
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f023 0210 	bic.w	r2, r3, #16
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <OC2Config+0xec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00b      	beq.n	8002148 <OC2Config+0x84>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <OC2Config+0xf0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <OC2Config+0x84>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <OC2Config+0xf4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d003      	beq.n	8002148 <OC2Config+0x84>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <OC2Config+0xf8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d11f      	bne.n	8002188 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	019b      	lsls	r3, r3, #6
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4619      	mov	r1, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fe00 	bl	8001da0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40014400 	.word	0x40014400
 80021bc:	40014800 	.word	0x40014800

080021c0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	4313      	orrs	r3, r2
 8002210:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4313      	orrs	r3, r2
 8002220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a21      	ldr	r2, [pc, #132]	; (80022ac <OC3Config+0xec>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <OC3Config+0x82>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a20      	ldr	r2, [pc, #128]	; (80022b0 <OC3Config+0xf0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <OC3Config+0x82>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <OC3Config+0xf4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <OC3Config+0x82>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1e      	ldr	r2, [pc, #120]	; (80022b8 <OC3Config+0xf8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11f      	bne.n	8002282 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	029b      	lsls	r3, r3, #10
 800225e:	4313      	orrs	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fd91 	bl	8001dbc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40014000 	.word	0x40014000
 80022b4:	40014400 	.word	0x40014400
 80022b8:	40014800 	.word	0x40014800

080022bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	0212      	lsls	r2, r2, #8
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	031b      	lsls	r3, r3, #12
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	031b      	lsls	r3, r3, #12
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a15      	ldr	r2, [pc, #84]	; (8002378 <OC4Config+0xbc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00b      	beq.n	8002340 <OC4Config+0x84>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a14      	ldr	r2, [pc, #80]	; (800237c <OC4Config+0xc0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <OC4Config+0x84>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a13      	ldr	r2, [pc, #76]	; (8002380 <OC4Config+0xc4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <OC4Config+0x84>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <OC4Config+0xc8>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d107      	bne.n	8002350 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	019b      	lsls	r3, r3, #6
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fd38 	bl	8001dd8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40014000 	.word	0x40014000
 8002380:	40014400 	.word	0x40014400
 8002384:	40014800 	.word	0x40014800

08002388 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	041b      	lsls	r3, r3, #16
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <OC5Config+0xac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00b      	beq.n	80023fc <OC5Config+0x74>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <OC5Config+0xb0>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <OC5Config+0x74>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <OC5Config+0xb4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <OC5Config+0x74>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <OC5Config+0xb8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d109      	bne.n	8002410 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fce9 	bl	8001df4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40014000 	.word	0x40014000
 800243c:	40014400 	.word	0x40014400
 8002440:	40014800 	.word	0x40014800

08002444 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	0212      	lsls	r2, r2, #8
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	051b      	lsls	r3, r3, #20
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	051b      	lsls	r3, r3, #20
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <OC6Config+0xac>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00b      	beq.n	80024ba <OC6Config+0x76>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <OC6Config+0xb0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <OC6Config+0x76>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <OC6Config+0xb4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d003      	beq.n	80024ba <OC6Config+0x76>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <OC6Config+0xb8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d109      	bne.n	80024ce <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fc9a 	bl	8001e14 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800

08002500 <LL_USART_IsEnabled>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_USART_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_USART_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_USART_SetStopBitsLength>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	605a      	str	r2, [r3, #4]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_USART_SetHWFlowCtrl>:
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_USART_SetBaudRate>:
{
 8002572:	b490      	push	{r4, r7}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002586:	d116      	bne.n	80025b6 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	005a      	lsls	r2, r3, #1
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	441a      	add	r2, r3
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	b29b      	uxth	r3, r3
 800259a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80025a2:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	60dc      	str	r4, [r3, #12]
}
 80025b4:	e00a      	b.n	80025cc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	085a      	lsrs	r2, r3, #1
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	441a      	add	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	60da      	str	r2, [r3, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc90      	pop	{r4, r7}
 80025d4:	4770      	bx	lr
	...

080025d8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff88 	bl	8002500 <LL_USART_IsEnabled>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d14e      	bne.n	8002694 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <LL_USART_Init+0xc8>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	6851      	ldr	r1, [r2, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	4311      	orrs	r1, r2
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	6912      	ldr	r2, [r2, #16]
 800260c:	4311      	orrs	r1, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	6992      	ldr	r2, [r2, #24]
 8002612:	430a      	orrs	r2, r1
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4619      	mov	r1, r3
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff80 	bl	8002526 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff8d 	bl	800254c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <LL_USART_Init+0xcc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d104      	bne.n	8002644 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fa9a 	bl	8001b74 <LL_RCC_GetUSARTClockFreq>
 8002640:	61b8      	str	r0, [r7, #24]
 8002642:	e016      	b.n	8002672 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <LL_USART_Init+0xd0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d107      	bne.n	800265c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fa69 	bl	8001b28 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e00a      	b.n	8002672 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <LL_USART_Init+0xd4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d106      	bne.n	8002672 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fa5d 	bl	8001b28 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00d      	beq.n	8002694 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d009      	beq.n	8002694 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002680:	2300      	movs	r3, #0
 8002682:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69b9      	ldr	r1, [r7, #24]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff6f 	bl	8002572 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002694:	7ffb      	ldrb	r3, [r7, #31]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	efff69f3 	.word	0xefff69f3
 80026a4:	40013800 	.word	0x40013800
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40004800 	.word	0x40004800

080026b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <LL_InitTick+0x30>)
 80026c4:	3b01      	subs	r3, #1
 80026c6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <LL_InitTick+0x30>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <LL_InitTick+0x30>)
 80026d0:	2205      	movs	r2, #5
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80026ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ffdd 	bl	80026b0 <LL_InitTick>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <LL_SetSystemCoreClock+0x1c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000004 	.word	0x20000004

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4e0d      	ldr	r6, [pc, #52]	; (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002726:	1ba4      	subs	r4, r4, r6
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2500      	movs	r5, #0
 800272c:	42a5      	cmp	r5, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4e0b      	ldr	r6, [pc, #44]	; (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	; (8002764 <__libc_init_array+0x44>)
 8002734:	f000 f820 	bl	8002778 <_init>
 8002738:	1ba4      	subs	r4, r4, r6
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2500      	movs	r5, #0
 800273e:	42a5      	cmp	r5, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002748:	4798      	blx	r3
 800274a:	3501      	adds	r5, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002752:	4798      	blx	r3
 8002754:	3501      	adds	r5, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	08002820 	.word	0x08002820
 800275c:	08002820 	.word	0x08002820
 8002760:	08002820 	.word	0x08002820
 8002764:	08002824 	.word	0x08002824

08002768 <memset>:
 8002768:	4402      	add	r2, r0
 800276a:	4603      	mov	r3, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
